import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import mlflow
import mlflow.sklearn
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, confusion_matrix
from PIL import Image, ImageOps
from streamlit_drawable_canvas import st_canvas

# Load d·ªØ li·ªáu (Caching to improve performance)
@st.cache_data
def load_mnist():
    mnist = fetch_openml('mnist_784', version=1, as_frame=False)
    X, y = mnist.data, mnist.target.astype(int)
    return X, y

# Cache the scaler object (use st.cache_resource for objects like scalers)
@st.cache_resource
def get_scaler():
    return StandardScaler()

# Preprocess d·ªØ li·ªáu
def preprocess_data(X_train, X_test, scaler):
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)
    return X_train_scaled, X_test_scaled

def main():
    # Initialize session state
    if 'model' not in st.session_state:
        st.session_state.model = None
    if 'scaler' not in st.session_state:
        st.session_state.scaler = get_scaler()

    # T·∫°o c√°c tab
    tab1, tab2 = st.tabs(["üîß X·ª≠ l√Ω d·ªØ li·ªáu & Hu·∫•n luy·ªán m√¥ h√¨nh", "üé® Demo m√¥ h√¨nh"])

    with tab1:
        st.header("1. X·ª≠ l√Ω d·ªØ li·ªáu v√† Hu·∫•n luy·ªán m√¥ h√¨nh")
        
        # Load d·ªØ li·ªáu
        X, y = load_mnist()
        st.write(f"üîπ D·ªØ li·ªáu MNIST c√≥ {X.shape[0]} h√¨nh ·∫£nh, m·ªói ·∫£nh c√≥ {X.shape[1]} pixel")

        # Chia d·ªØ li·ªáu
        test_size = st.slider("T·ª∑ l·ªá d·ªØ li·ªáu ki·ªÉm tra", 0.1, 0.5, 0.2)
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=42)
        st.success(f"‚úÖ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chia th√†nh c√¥ng v·ªõi t·ª∑ l·ªá ki·ªÉm tra l√† {test_size:.2f}!")

        # Preprocess d·ªØ li·ªáu
        X_train_scaled, X_test_scaled = preprocess_data(X_train, X_test, st.session_state.scaler)

        # Ch·ªçn m√¥ h√¨nh
        model_option = st.selectbox("Ch·ªçn m√¥ h√¨nh ƒë·ªÉ hu·∫•n luy·ªán", ["Decision Tree", "SVM"])

        # Tham s·ªë m√¥ h√¨nh
        if model_option == "Decision Tree":
            max_depth = st.slider("Max Depth (Decision Tree)", 1, 20, 10)
        else:
            C_value = st.slider("C (SVM)", 0.1, 10.0, 1.0)

        # Hu·∫•n luy·ªán m√¥ h√¨nh
        if st.button("Hu·∫•n luy·ªán m√¥ h√¨nh"):
            st.write("‚è≥ ƒêang hu·∫•n luy·ªán m√¥ h√¨nh...")
            if model_option == "Decision Tree":
                st.session_state.model = DecisionTreeClassifier(max_depth=max_depth, random_state=42)
            else:
                st.session_state.model = SVC(kernel='rbf', C=C_value)
            
            st.session_state.model.fit(X_train_scaled, y_train)
            y_pred = st.session_state.model.predict(X_test_scaled)
            accuracy = accuracy_score(y_test, y_pred)
            st.success(f"‚úÖ ƒê·ªô ch√≠nh x√°c: {accuracy:.4f}")
            
            # Hi·ªÉn th·ªã ma tr·∫≠n nh·∫ßm l·∫´n
            fig, ax = plt.subplots(figsize=(6, 4))
            ax.matshow(confusion_matrix(y_test, y_pred), cmap=plt.cm.Blues)
            st.pyplot(fig)

            # L∆∞u v√†o MLflow (with error handling)
            try:
                with mlflow.start_run():
                    mlflow.sklearn.log_model(st.session_state.model, "model")
                    mlflow.log_metric("accuracy", accuracy)
                    mlflow.log_param("model", model_option)
                    mlflow.log_param("test_size", test_size)
                st.success("‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ trong MLflow!")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è L·ªói khi l∆∞u v√†o MLflow: {e}")

            st.info("üéâ M√¥ h√¨nh hu·∫•n luy·ªán th√†nh c√¥ng! Chuy·ªÉn sang tab 2 ƒë·ªÉ demo.")

    with tab2:
        st.header("2. Demo m√¥ h√¨nh")

        if st.session_state.model is None:
            st.warning("‚ö†Ô∏è Vui l√≤ng hu·∫•n luy·ªán m√¥ h√¨nh tr∆∞·ªõc khi th·ª≠ demo!")
            st.info("üéØ Chuy·ªÉn sang tab 1 ƒë·ªÉ hu·∫•n luy·ªán m√¥ h√¨nh.")
        else:
            st.subheader("V·∫Ω s·ªë ho·∫∑c t·∫£i ·∫£nh ƒë·ªÉ m√¥ h√¨nh d·ª± ƒëo√°n")
            
            # T·∫£i ·∫£nh ho·∫∑c v·∫Ω
            uploaded_file = st.file_uploader("T·∫£i ·∫£nh ch·ªØ s·ªë (28x28 pixel)", type=['png', 'jpg', 'jpeg'])
            canvas_result = st_canvas(
                fill_color="black",
                stroke_width=10,
                stroke_color="white",
                background_color="black",
                height=280,
                width=280,
                drawing_mode="freedraw",
                key="canvas",
            )

            def preprocess_image(image, scaler):
                image = image.convert('L')  # Convert to grayscale
                image = ImageOps.invert(image)  # Invert colors
                image = image.resize((28, 28))  # Resize to 28x28
                image_array = np.array(image).reshape(1, -1)  # Flatten
                image_scaled = scaler.transform(image_array)  # Apply the same scaling
                return image_scaled

            # D·ª± ƒëo√°n
            if uploaded_file or (canvas_result.image_data is not None):
                if uploaded_file:
                    image = Image.open(uploaded_file)
                else:
                    image = Image.fromarray((canvas_result.image_data[:, :, :3] * 255).astype(np.uint8))

                image_scaled = preprocess_image(image, st.session_state.scaler)
                prediction = st.session_state.model.predict(image_scaled)[0]
                st.image(image, caption=f"üì¢ M√¥ h√¨nh d·ª± ƒëo√°n: {prediction}", use_container_width=True)
                st.success(f"‚úÖ K·∫øt qu·∫£ d·ª± ƒëo√°n: {prediction}")
                st.info(f"üéâ D·ª± ƒëo√°n th√†nh c√¥ng! Ch·ªØ s·ªë b·∫°n v·∫Ω l√†: {prediction}")
            else:
                st.info("‚úèÔ∏è V·∫Ω s·ªë ho·∫∑c t·∫£i ·∫£nh ƒë·ªÉ th·ª≠ d·ª± ƒëo√°n.")

if __name__ == "__main__":
    main()