import pandas as pd
import streamlit as st
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
# Nh·ªõ t·∫°o th√™m ch·ªçn model ƒë·ªÉ d·ª± ƒëo√°n
def load_data():
    df = pd.read_csv('titanic.csv')#N·∫øu d√πng web app th√¨ thay ƒë∆∞·ªùng d·∫´n b·∫±ng 'titanic.csv'
   #c√≤n local th√¨ thay b·∫±ng '/Users/nguyenvietnam/Documents/Machine_Learning/titanic.csv'
    return df

def preprocess_data(df):
    # X·ª≠ l√Ω gi√° tr·ªã thi·∫øu
    for column in df.columns:
        if df[column].dtype == 'object':
            df[column].fillna(df[column].mode()[0], inplace=True)
        else:
            df[column].fillna(df[column].median(), inplace=True)
    
    # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ph√¢n lo·∫°i th√†nh s·ªë
    categorical_columns = ['Sex', 'Embarked', 'Cabin', 'Ticket']
    label_encoders = {}
    category_values = {}
    for col in categorical_columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        label_encoders[col] = le
        category_values[col] = le.classes_  # L∆∞u danh s√°ch gi√° tr·ªã c√≥ s·∫µn
    
    # Lo·∫°i b·ªè c·ªôt 'Name' n·∫øu c√≥
    if 'Name' in df.columns:
        df.drop(columns=['Name'], inplace=True)

    return df, label_encoders, category_values

def main():
    st.title("D·ª± ƒëo√°n s·ªëng s√≥t tr√™n t√†u Titanic")
    
    df = load_data()
    df, label_encoders, category_values = preprocess_data(df)
    
    # T√°ch t·∫≠p d·ªØ li·ªáu
    X = df.drop(columns=['Survived'])
    y = df['Survived']
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42)
    
    # Hu·∫•n luy·ªán m√¥ h√¨nh Random Forest
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    
    st.header("1. Ch·ªçn D·ªØ Li·ªáu ƒê·ªÉ D·ª± ƒêo√°n")
    input_data = {}
    for col in X.columns:
        if col in category_values:  # C·ªôt ph√¢n lo·∫°i
            input_data[col] = st.selectbox(f"Ch·ªçn gi√° tr·ªã cho {col}", category_values[col])
        else:  # C·ªôt s·ªë
            min_val, max_val = df[col].min(), df[col].max()
            input_data[col] = st.number_input(f"Nh·∫≠p gi√° tr·ªã cho {col}", float(min_val), float(max_val))
    
    # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·∫ßu v√†o
    input_df = pd.DataFrame([input_data])
    
    # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ph√¢n lo·∫°i th√†nh s·ªë
    for col in label_encoders:
        input_df[col] = label_encoders[col].transform(input_df[col])
    
    st.header("2. K·∫øt Qu·∫£ D·ª± ƒêo√°n")
    if st.button("D·ª± ƒëo√°n s·ªëng s√≥t"):
        prediction = model.predict(input_df)[0]
        st.subheader(f"K·∫øt qu·∫£: {'S·ªëng s√≥t' if prediction == 1 else 'Kh√¥ng s·ªëng s√≥t'}")

        # ‚úÖ **Ki·ªÉm tra d·ªØ li·ªáu c√≥ trong t·∫≠p Titanic kh√¥ng**
        match = df[(X == input_df.iloc[0]).all(axis=1)]
        if not match.empty:
            true_value = match["Survived"].values[0]
            is_correct = prediction == true_value
            st.write(f"üîç **So s√°nh v·ªõi d·ªØ li·ªáu g·ªëc:** {is_correct}")
        else:
            st.write("üÜï **D·ªØ li·ªáu n√†y kh√¥ng c√≥ trong t·∫≠p Titanic g·ªëc!**")
    
if __name__ == "__main__":
    main()
