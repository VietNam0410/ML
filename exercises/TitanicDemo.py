import streamlit as st
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
import os
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score


def preprocess_data(df):
    # X·ª≠ l√Ω gi√° tr·ªã thi·∫øu
    for column in df.columns:
        if df[column].dtype == 'object':
            df[column].fillna(df[column].mode()[0], inplace=True)
        else:
            df[column].fillna(df[column].median(), inplace=True)
    
    # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ph√¢n lo·∫°i th√†nh s·ªë
    categorical_columns = ['Sex', 'Embarked', 'Cabin', 'Ticket']
    label_encoders = {}
    category_values = {}
    for col in categorical_columns:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        label_encoders[col] = le
        category_values[col] = le.classes_  # L∆∞u danh s√°ch gi√° tr·ªã c√≥ s·∫µn
    
    # Lo·∫°i b·ªè c·ªôt 'Name' n·∫øu c√≥
    if 'Name' in df.columns:
        df.drop(columns=['Name'], inplace=True)

    return df, label_encoders, category_values

def train_model(X, y, model_type="Random Forest"):
    # T√°ch t·∫≠p d·ªØ li·ªáu
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.15, random_state=42)
    
    # Ch·ªçn v√† hu·∫•n luy·ªán m√¥ h√¨nh d·ª±a tr√™n l·ª±a ch·ªçn
    if model_type == "Random Forest":
        model = RandomForestClassifier(n_estimators=100, random_state=42)
    else:  # Logistic Regression
        model = LogisticRegression(random_state=42, max_iter=1000)
    
    model.fit(X_train, y_train)
    return model, X_test, y_test

def main():
    st.title("D·ª± ƒëo√°n S·ªëng S√≥t Tr√™n T√†u Titanic")
    
    # N√∫t ƒë·ªÉ t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu
    if st.button("T·∫£i v√† X·ª≠ L√Ω D·ªØ Li·ªáu"):
        with st.spinner("ƒêang t·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu..."):
            df = load_data()
            df, label_encoders, category_values = preprocess_data(df)
        
        # L∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√†o session_state ƒë·ªÉ t√°i s·ª≠ d·ª•ng
        st.session_state.df = df
        st.session_state.label_encoders = label_encoders
        st.session_state.category_values = category_values
        
        st.success("D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c t·∫£i v√† x·ª≠ l√Ω th√†nh c√¥ng!")
        st.write("### D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω:")
        st.dataframe(df.head())
    
    # N·∫øu d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, ti·∫øp t·ª•c v·ªõi d·ª± ƒëo√°n
    if 'df' in st.session_state:
        df = st.session_state.df
        label_encoders = st.session_state.label_encoders
        category_values = st.session_state.category_values
        
        # T√°ch t·∫≠p d·ªØ li·ªáu
        X = df.drop(columns=['Survived'])
        y = df['Survived']
        
        # Ch·ªçn m√¥ h√¨nh
        model_choice = st.selectbox("Ch·ªçn m√¥ h√¨nh ƒë·ªÉ d·ª± ƒëo√°n", ["Random Forest", "Logistic Regression"])
        
        # Hu·∫•n luy·ªán m√¥ h√¨nh
        model, X_test, y_test = train_model(X, y, model_choice)
        
        st.header("1. Ch·ªçn D·ªØ Li·ªáu ƒê·ªÉ D·ª± ƒêo√°n")
        input_data = {}
        for col in X.columns:
            if col in category_values:  # C·ªôt ph√¢n lo·∫°i
                input_data[col] = st.selectbox(f"Ch·ªçn gi√° tr·ªã cho {col}", category_values[col])
            else:  # C·ªôt s·ªë
                min_val, max_val = df[col].min(), df[col].max()
                input_data[col] = st.number_input(f"Nh·∫≠p gi√° tr·ªã cho {col}", float(min_val), float(max_val))
        
        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ƒë·∫ßu v√†o
        input_df = pd.DataFrame([input_data])
        
        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu ph√¢n lo·∫°i th√†nh s·ªë
        for col in label_encoders:
            input_df[col] = label_encoders[col].transform(input_df[col])
        
        st.header("2. K·∫øt Qu·∫£ D·ª± ƒêo√°n")
        if st.button("D·ª± ƒëo√°n s·ªëng s√≥t"):
            prediction = model.predict(input_df)[0]
            st.subheader(f"K·∫øt qu·∫£: {'S·ªëng s√≥t' if prediction == 1 else 'Kh√¥ng s·ªëng s√≥t'}")

            # Ki·ªÉm tra d·ªØ li·ªáu c√≥ trong t·∫≠p Titanic kh√¥ng
            match = df[(X == input_df.iloc[0]).all(axis=1)]
            if not match.empty:
                true_value = match["Survived"].values[0]
                is_correct = prediction == true_value
                st.write(f"üîç **So s√°nh v·ªõi d·ªØ li·ªáu g·ªëc:** {'ƒê√∫ng' if is_correct else 'Sai'}")
            else:
                st.write("üÜï **D·ªØ li·ªáu n√†y kh√¥ng c√≥ trong t·∫≠p Titanic g·ªëc!**")
        
        # ƒê√°nh gi√° m√¥ h√¨nh (t√πy ch·ªçn)
        st.header("3. ƒê√°nh gi√° m√¥ h√¨nh")
        y_pred = model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        st.write(f"ƒê·ªô ch√≠nh x√°c tr√™n t·∫≠p test: {accuracy:.4f}")

if __name__ == "__main__":
    main()